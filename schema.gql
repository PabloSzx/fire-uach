# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Category {
  _id: ObjectId!
  name: String!
}

type CategoryImageAssociation {
  _id: ObjectId!
  user: User
  categoryChosen: Category
  otherCategoryInput: String
  rejectedCategories: [Category!]!
  image: Image
  location: Location
  updatedAt: DateTime!
  createdAt: DateTime!
}

input CategoryImageAssociationAnswer {
  categoryChosen: ObjectId
  otherCategoryInput: String
  image: ObjectId!
  rejectedCategories: [ObjectId!]!
  location: LocationInput
}

input ChangePasswordInput {
  oldPassword: String!
  password: String!
}

input CreateCategory {
  name: String!
}

input CreateTag {
  name: String!
}

input CreateTip {
  text: String!
}

input DateRange {
  minDate: DateTime!
  maxDate: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input EditCategory {
  _id: ObjectId!
  name: String!
}

input EditImage {
  _id: ObjectId!
  validated: Boolean!
}

input EditTag {
  _id: ObjectId!
  name: String!
}

input EditTip {
  text: String!
  _id: ObjectId!
  priority: Float = 0
}

input EditUser {
  _id: ObjectId!
  admin: Boolean!
  types: [UserType!]!
  typeSpecify: String!
  fireRelated: Boolean!
  fireRelatedSpecify: String!
  locked: Boolean!
}

"""
A field whose value conforms to the standard internet email address format as
specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

type Image {
  _id: ObjectId!
  filename: String!
  mimetype: String!
  extension: String!
  validated: Boolean!
  uploader: User
  size: Float
  width: Float
  height: Float
  uploadedAt: DateTime!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type Location {
  latitude: Float!
  longitude: Float!
}

input LocationInput {
  latitude: Float!
  longitude: Float!
}

input LoginInput {
  email: EmailAddress!
  password: String!
}

type Mutation {
  login(data: LoginInput!): User!
  signUp(data: SignUpInput!): User!
  logout: Boolean!
  unlock(data: UnlockInput!): User!
  changePassword(data: ChangePasswordInput!): User!
  createCategory(data: CreateCategory!): [Category!]!
  editCategory(data: EditCategory!): [Category!]!
  removeCategory(data: RemoveCategory!): [Category!]!
  resetCategoryImageAssociations(user: ObjectId!): [CategoryImageAssociation!]!
  csvResultsCategoryImageAssociations(dateRange: DateRange!, onlyValidatedImages: Boolean!): String!
  answerCategoryImageAssociation(onlyOwnImages: Boolean = false, data: CategoryImageAssociationAnswer!): Image
  uploadImage(file: Upload!): [Image!]!
  optimizeImages(_ids: [ObjectId!]): [Image!]!
  editImage(data: EditImage!): [Image!]!
  removeImage(data: RemoveImage!): [Image!]!
  createTag(data: CreateTag!): [Tag!]!
  editTag(data: EditTag!): [Tag!]!
  removeTag(data: RemoveTag!): [Tag!]!
  resetTagCategoryAssociations(user: ObjectId!): [TagCategoryAssociation!]!
  csvResultsTagCategoryAssociations(dateRange: DateRange!): String!
  answerTagCategoryAssociation(data: TagCategoryAssociationAnswer!): Tag
  tip: Tip
  createTip(data: CreateTip!): [Tip!]!
  editTip(data: EditTip!): [Tip!]!
  removeTip(_id: ObjectId!): [Tip!]!
  editUser(data: EditUser!): [User!]!
  removeUser(id: ObjectId!): [User!]!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  currentUser: User
  categories: [Category!]!
  notAnsweredImage(onlyOwnImages: Boolean = false): Image
  image(id: ObjectId!): Image
  images: [Image!]!
  validatedImages: [Image!]!
  ownImages: [Image!]!
  userStats(user_id: ObjectId!): UserStats
  ownStats: UserStats!
  tags: [Tag!]!
  notAnsweredTag: Tag
  allTips: [Tip!]!
  allUsers: [User!]!
}

input RemoveCategory {
  _id: ObjectId!
}

input RemoveImage {
  _id: ObjectId!
}

input RemoveTag {
  _id: ObjectId!
}

input SignUpInput {
  email: EmailAddress!
  password: String!
  types: [UserType!]!
  typeSpecify: String!
  fireRelated: Boolean!
  fireRelatedSpecify: String!
}

type Tag {
  _id: ObjectId!
  name: String!
}

type TagCategoryAssociation {
  _id: ObjectId!
  user: User
  tag: Tag
  categoryChosen: Category
  otherCategoryInput: String
  rejectedCategories: [Category!]!
  location: Location
  updatedAt: DateTime!
  createdAt: DateTime!
}

input TagCategoryAssociationAnswer {
  tag: ObjectId!
  categoryChosen: ObjectId
  otherCategoryInput: String
  rejectedCategories: [ObjectId!]!
  location: LocationInput
}

type Tip {
  _id: ObjectId!
  text: String!
  priority: Int!
}

input UnlockInput {
  email: EmailAddress!
  password: String!
  unlockKey: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: ObjectId!
  email: EmailAddress!
  admin: Boolean!
  unlockKey: String!
  types: [UserType!]!
  typeSpecify: String!
  fireRelated: Boolean!
  fireRelatedSpecify: String!
  locked: Boolean!
  imagesUploaded: [Image!]!
  tagCategoryAssociations: [TagCategoryAssociation!]!
  categoryImageAssociations: [CategoryImageAssociation!]!
  readTips: [Tip!]!
}

type UserStats {
  _id: ObjectId!
  user: User
  nAssociatedImages: Int!
  nAssociatedTags: Int!
  nUploadedImages: Int!
  nValidatedUploadedImages: Int!
  level: Int!
  score: Int!
}

enum UserType {
  scientificOrAcademic
  technicianOrProfessional
  student
  corralHabitant
  villaAlemanaHabitant
  other
}
